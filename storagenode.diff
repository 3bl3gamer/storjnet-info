diff --git a/pkg/kademlia/endpoint.go b/pkg/kademlia/endpoint.go
index 87d01363b..437a2f818 100644
--- a/pkg/kademlia/endpoint.go
+++ b/pkg/kademlia/endpoint.go
@@ -17,6 +17,7 @@ import (
 	"storj.io/storj/pkg/identity"
 	"storj.io/storj/pkg/pb"
 	"storj.io/storj/pkg/storj"
+"github.com/gogo/protobuf/jsonpb"
 )
 
 // EndpointError defines errors class for Endpoint
@@ -54,6 +55,15 @@ func NewEndpoint(log *zap.Logger, service *Kademlia, pingStats pingStatsSource,
 
 // Query is a node to node communication query
 func (endpoint *Endpoint) Query(ctx context.Context, req *pb.QueryRequest) (_ *pb.QueryResponse, err error) {
+	println("[NODEID:Q] " + req.Sender.Id.String())
+        m := jsonpb.Marshaler{Indent: "", EmitDefaults: true}
+        str, err := m.MarshalToString(req.Sender)
+        if err != nil {
+                println("[NODE:ERR:Q] " + err.Error())
+        } else {
+                println("[NODE:KAD:Q] " + str)
+        }
+
 	defer mon.Task()(&ctx)(&err)
 
 	if req.GetPingback() {
diff --git a/pkg/kademlia/peer_discovery.go b/pkg/kademlia/peer_discovery.go
index c362befc5..1bac5e783 100644
--- a/pkg/kademlia/peer_discovery.go
+++ b/pkg/kademlia/peer_discovery.go
@@ -13,6 +13,7 @@ import (
 	"storj.io/storj/pkg/kademlia/kademliaclient"
 	"storj.io/storj/pkg/pb"
 	"storj.io/storj/pkg/storj"
+"github.com/gogo/protobuf/jsonpb"
 )
 
 type peerDiscovery struct {
@@ -82,6 +83,17 @@ func (lookup *peerDiscovery) Run(ctx context.Context) (_ []*pb.Node, err error)
 				lookup.cond.L.Unlock()
 
 				neighbors, err := lookup.dialer.Lookup(ctx, lookup.self, *next, lookup.target, lookup.k)
+if next != nil {
+	println("[NODEID:P] " + next.Id.String())
+	m := jsonpb.Marshaler{Indent: "", EmitDefaults: true}
+	str, err := m.MarshalToString(next)
+	if err != nil {
+		println("[NODE:ERR:P] " + err.Error())
+	} else {
+		println("[NODE:KAD:P] " + str)
+	}
+}
+
 				if err != nil {
 					lookup.queue.QueryFailure(next)
 					if !isDone(ctx) {
diff --git a/storagenode/monitor/monitor.go b/storagenode/monitor/monitor.go
index 64dc1423f..e8cf99426 100644
--- a/storagenode/monitor/monitor.go
+++ b/storagenode/monitor/monitor.go
@@ -113,16 +113,16 @@ func (service *Service) Run(ctx context.Context) (err error) {
 	}
 
 	// Ensure the disk is at least 500GB in size, which is our current minimum required to be an operator
-	if service.allocatedDiskSpace < service.Config.MinimumDiskSpace.Int64() {
-		service.log.Error("Total disk space less than required minimum", zap.Int64("bytes", service.Config.MinimumDiskSpace.Int64()))
-		return Error.New("disk space requirement not met")
-	}
+	//if service.allocatedDiskSpace < service.Config.MinimumDiskSpace.Int64() {
+	//	service.log.Error("Total disk space less than required minimum", zap.Int64("bytes", service.Config.MinimumDiskSpace.Int64()))
+	//	return Error.New("disk space requirement not met")
+	//}
 
 	// Ensure the bandwidth is at least 500GB
-	if service.allocatedBandwidth < service.Config.MinimumBandwidth.Int64() {
-		service.log.Error("Total Bandwidth available less than required minimum", zap.Int64("bytes", service.Config.MinimumBandwidth.Int64()))
-		return Error.New("bandwidth requirement not met")
-	}
+	//if service.allocatedBandwidth < service.Config.MinimumBandwidth.Int64() {
+	//	service.log.Error("Total Bandwidth available less than required minimum", zap.Int64("bytes", service.Config.MinimumBandwidth.Int64()))
+	//	return Error.New("bandwidth requirement not met")
+	//}
 
 	return service.Loop.Run(ctx, func(ctx context.Context) error {
 		err := service.updateNodeInformation(ctx)
